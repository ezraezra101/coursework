#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 71 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 7862 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 206
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname |conn"
 #"ect four with hints--complete|) (read-case-sensitive #t) (teachpacks"
 #" ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f"
 #" ())))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 2 #"Co"
0 0 17 3 2 #"nn"
0 0 17 3 2 #"ec"
0 0 17 3 2 #"t "
0 0 17 3 2 #"4 "
0 0 17 3 2 #"pr"
0 0 17 3 2 #"og"
0 0 17 3 1 #"r"
0 0 17 3 2 #"am"
0 0 17 3 1 #" "
0 0 17 3 9 #"- Ezra Da"
0 0 17 3 2 #"vi"
0 0 17 3 1 #"s"
0 0 17 3 2 #" a"
0 0 17 3 1 #"n"
0 0 17 3 15 #"d Ivan Melnikov"
0 0 23 29 1 #"\n"
0 0 17 3 80
(
 #";; do not modify the constants, except for experimentation with ROWS"
 #" and COLUMNS"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #")"
0 0 23 3 4 #"    "
0 0 17 3 11 #";; can vary"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 11 #";; can vary"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"DEPTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 11 #"world-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"position"
0 0 23 3 1 #" "
0 0 14 3 10 #"whose-turn"
0 0 23 3 1 #" "
0 0 14 3 8 #"settings"
0 0 23 3 1 #" "
0 0 14 3 10 #"other-info"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 7 #";;moved"
0 0 17 3 1 #" "
0 0 17 3 1 #"f"
0 0 17 3 2 #"or"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 2 #"he"
0 0 17 3 2 #"ck"
0 0 17 3 1 #"-"
0 0 17 3 2 #"ex"
0 0 17 3 1 #"p"
0 0 17 3 1 #"e"
0 0 17 3 1 #"c"
0 0 17 3 1 #"t"
0 0 17 3 2 #" p"
0 0 17 3 3 #"urp"
0 0 17 3 1 #"o"
0 0 17 3 3 #"ses"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; ListOfMove state Move Number--> Move"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; This function examines each move in the list, and returns"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; the move that gets the lowest value on evaluation-function."
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 2 #"Nu"
0 0 17 3 3 #"mbe"
0 0 17 3 2 #"r "
0 0 17 3 2 #"is"
0 0 17 3 2 #" b"
0 0 17 3 1 #"e"
0 0 17 3 1 #"s"
0 0 17 3 2 #"t "
0 0 17 3 2 #"mo"
0 0 17 3 2 #"ve"
0 0 17 3 2 #" v"
0 0 17 3 1 #"a"
0 0 17 3 3 #"lue"
0 0 17 3 3 #" - "
0 0 17 3 1 #"i"
0 0 17 3 2 #"s "
0 0 17 3 2 #"in"
0 0 17 3 1 #"f"
0 0 17 3 2 #"in"
0 0 17 3 2 #"it"
0 0 17 3 2 #"y "
0 0 17 3 2 #"un"
0 0 17 3 2 #"ti"
0 0 17 3 2 #"l "
0 0 17 3 1 #"r"
0 0 17 3 5 #"eplac"
0 0 17 3 6 #"ement."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 8 #"check-ex"
0 0 14 3 4 #"pect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"find-best-mo"
0 0 14 3 2 #"ve"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 20 3 1 #"2"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 20 3 1 #"5"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 20 3 1 #"2"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 20 3 1 #"5"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 20 3 1 #"+"
0 0 20 3 5 #"inf.0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 17 3 1 #" "
0 0 17 3 2 #"Fu"
0 0 17 3 2 #"nc"
0 0 17 3 1 #"t"
0 0 17 3 2 #"io"
0 0 17 3 1 #"n"
0 0 17 3 11 #" definition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"find-best-move"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 9 #"best-move"
0 0 23 3 1 #" "
0 0 14 3 7 #"best-mo"
0 0 14 3 6 #"ve-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 2 #"co"
0 0 15 3 2 #"nd"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"No"
0 0 19 3 1 #" "
0 0 19 3 7 #"Legal M"
0 0 19 3 5 #"oves\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 5 #"efine"
0 0 23 3 1 #" "
0 0 14 3 9 #"first-mov"
0 0 14 3 2 #"e-"
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"min-ma"
0 0 14 3 7 #"x-state"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 4 #"    "
0 0 23 3 1 #" "
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 14 #"first-move-val"
0 0 23 3 1 #" "
0 0 14 3 13 #"best-move-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 14 3 9 #"best-move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 5 #"efine"
0 0 23 3 1 #" "
0 0 14 3 9 #"first-mov"
0 0 14 3 2 #"e-"
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"min-ma"
0 0 14 3 7 #"x-state"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 4 #"    "
0 0 23 3 1 #" "
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 14 #"first-move-val"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 14 3 13 #"best-move-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #" "
0 0 23 3 15 #"               "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 5 #"find-"
0 0 14 3 6 #"best-m"
0 0 14 3 3 #"ove"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 14 #"first-move-val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #" "
0 0 23 3 15 #"               "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 5 #"find-"
0 0 14 3 9 #"best-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 9 #"best-move"
0 0 23 3 1 #" "
0 0 14 3 13 #"best-move-val"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; State --> State"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 12 #"This takes t"
0 0 17 3 27 #"he world state, and uses it"
0 0 23 29 1 #"\n"
0 0 17 3 5 #";; to"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 5 #"reate"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 5 #"other"
0 0 17 3 1 #" "
0 0 17 3 5 #"world"
0 0 17 3 1 #" "
0 0 17 3 5 #"state"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"comp"
0 0 17 3 4 #"uter"
0 0 17 3 1 #" "
0 0 17 3 6 #"player"
0 0 17 3 1 #" "
0 0 17 3 4 #"made"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 17 #" intelligent move"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"computer-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"legal-nex"
0 0 14 3 7 #"t-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"find-b"
0 0 14 3 1 #"e"
0 0 14 3 7 #"st-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 6 #"+inf.0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";;         "
0 0 17 3 1 #" "
0 0 17 3 1 #" "
0 0 17 3 2 #"  "
0 0 17 3 2 #"  "
0 0 17 3 2 #"  "
0 0 17 3 1 #" "
0 0 17 3 2 #"  "
0 0 17 3 1 #" "
0 0 17 3 2 #"  "
0 0 17 3 52 #"                    bad move ^       ^ Undesirable e"
0 0 17 3 14 #"valuation numb"
0 0 17 3 2 #"er"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"min-max-state"
0 0 23 3 1 #" "
0 0 14 3 5 #"DEPTH"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; M"
0 0 17 3 2 #"ut"
0 0 17 3 1 #"u"
0 0 17 3 3 #"al "
0 0 17 3 18 #"recursion buddies."
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; m"
0 0 17 3 3 #"in-"
0 0 17 3 8 #"max-stat"
0 0 17 3 2 #"e "
0 0 17 3 1 #"i"
0 0 17 3 2 #"s "
0 0 17 3 2 #"ca"
0 0 17 3 2 #"ll"
0 0 17 3 1 #"e"
0 0 17 3 2 #"d "
0 0 17 3 2 #"wi"
0 0 17 3 1 #"t"
0 0 17 3 2 #"h "
0 0 17 3 2 #"wo"
0 0 17 3 1 #"r"
0 0 17 3 2 #"ld"
0 0 17 3 2 #" s"
0 0 17 3 1 #"t"
0 0 17 3 1 #"a"
0 0 17 3 2 #"te"
0 0 17 3 11 #" and depth,"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; min-max-"
0 0 17 3 2 #"li"
0 0 17 3 1 #"s"
0 0 17 3 2 #"t-"
0 0 17 3 4 #"of-m"
0 0 17 3 4 #"ove "
0 0 17 3 1 #"i"
0 0 17 3 2 #"s "
0 0 17 3 1 #"t"
0 0 17 3 4 #"hen "
0 0 17 3 2 #"ca"
0 0 17 3 1 #"l"
0 0 17 3 2 #"le"
0 0 17 3 1 #"d"
0 0 17 3 1 #" "
0 0 17 3 2 #"fr"
0 0 17 3 1 #"o"
0 0 17 3 2 #"m "
0 0 17 3 1 #"f"
0 0 17 3 1 #"o"
0 0 17 3 2 #"rm"
0 0 17 3 1 #"e"
0 0 17 3 2 #"r "
0 0 17 3 1 #"f"
0 0 17 3 12 #"unction with"
0 0 23 29 1 #"\n"
0 0 17 3 5 #";; de"
0 0 17 3 3 #"pth"
0 0 17 3 3 #", l"
0 0 17 3 2 #"is"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 1 #"o"
0 0 17 3 1 #"f"
0 0 17 3 2 #" p"
0 0 17 3 2 #"os"
0 0 17 3 1 #"s"
0 0 17 3 2 #"ib"
0 0 17 3 1 #"l"
0 0 17 3 2 #"e "
0 0 17 3 2 #"mo"
0 0 17 3 2 #"ve"
0 0 17 3 1 #"s"
0 0 17 3 11 #" and state."
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; d"
0 0 17 3 2 #"et"
0 0 17 3 5 #"ermin"
0 0 17 3 5 #"ate i"
0 0 17 3 2 #"s "
0 0 17 3 2 #"co"
0 0 17 3 1 #"m"
0 0 17 3 1 #"p"
0 0 17 3 2 #"ar"
0 0 17 3 1 #"i"
0 0 17 3 1 #"s"
0 0 17 3 3 #"on "
0 0 17 3 2 #"fu"
0 0 17 3 2 #"nc"
0 0 17 3 1 #"t"
0 0 17 3 1 #"i"
0 0 17 3 2 #"on"
0 0 17 3 2 #", "
0 0 17 3 2 #"ca"
0 0 17 3 2 #"ll"
0 0 17 3 4 #"ed f"
0 0 17 3 2 #"ro"
0 0 17 3 2 #"m "
0 0 17 3 1 #"m"
0 0 17 3 3 #"in-"
0 0 17 3 2 #"ma"
0 0 17 3 3 #"x-l"
0 0 17 3 1 #"i"
0 0 17 3 3 #"st-"
0 0 17 3 2 #"of"
0 0 17 3 2 #"-m"
0 0 17 3 8 #"ove with"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 5 #"state"
0 0 17 3 2 #" a"
0 0 17 3 1 #"n"
0 0 17 3 2 #"d "
0 0 17 3 2 #"tw"
0 0 17 3 1 #"o"
0 0 17 3 1 #" "
0 0 17 3 2 #"va"
0 0 17 3 1 #"l"
0 0 17 3 2 #"ue"
0 0 17 3 1 #"s"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 1 #"t"
0 0 17 3 1 #"h"
0 0 17 3 3 #"e m"
0 0 17 3 2 #"ov"
0 0 17 3 2 #"es"
0 0 17 3 2 #", "
0 0 17 3 2 #"ev"
0 0 17 3 2 #"al"
0 0 17 3 1 #"u"
0 0 17 3 1 #"a"
0 0 17 3 1 #"t"
0 0 17 3 3 #"ed "
0 0 17 3 1 #"w"
0 0 17 3 1 #"i"
0 0 17 3 2 #"th"
0 0 17 3 1 #" "
0 0 17 3 2 #"ev"
0 0 17 3 3 #"alu"
0 0 17 3 1 #"a"
0 0 17 3 2 #"ti"
0 0 17 3 12 #"on function."
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; M"
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 2 #"or"
0 0 17 3 3 #" ma"
0 0 17 3 2 #"x "
0 0 17 3 4 #"is d"
0 0 17 3 2 #"et"
0 0 17 3 1 #"e"
0 0 17 3 2 #"rm"
0 0 17 3 1 #"i"
0 0 17 3 2 #"ne"
0 0 17 3 4 #"d ba"
0 0 17 3 2 #"se"
0 0 17 3 1 #"d"
0 0 17 3 2 #" o"
0 0 17 3 2 #"n "
0 0 17 3 2 #"cu"
0 0 17 3 2 #"rr"
0 0 17 3 2 #"en"
0 0 17 3 2 #"t "
0 0 17 3 1 #"t"
0 0 17 3 3 #"urn"
0 0 17 3 1 #" "
0 0 17 3 2 #"- "
0 0 17 3 1 #"("
0 0 17 3 16 #"Computer|Human)."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; Number State --> Number"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; F"
0 0 17 3 2 #"un"
0 0 17 3 2 #"ct"
0 0 17 3 1 #"i"
0 0 17 3 3 #"on "
0 0 17 3 2 #"re"
0 0 17 3 1 #"t"
0 0 17 3 2 #"ur"
0 0 17 3 3 #"ns "
0 0 17 3 3 #"val"
0 0 17 3 1 #"u"
0 0 17 3 5 #"e of "
0 0 17 3 2 #"bo"
0 0 17 3 2 #"ar"
0 0 17 3 2 #"d "
0 0 17 3 1 #"s"
0 0 17 3 2 #"ta"
0 0 17 3 3 #"te "
0 0 17 3 2 #"fr"
0 0 17 3 1 #"o"
0 0 17 3 2 #"m "
0 0 17 3 1 #"t"
0 0 17 3 1 #"h"
0 0 17 3 2 #"e "
0 0 17 3 2 #"ev"
0 0 17 3 1 #"a"
0 0 17 3 2 #"lu"
0 0 17 3 1 #"a"
0 0 17 3 1 #"t"
0 0 17 3 2 #"io"
0 0 17 3 12 #"n function. "
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; I"
0 0 17 3 1 #"t"
0 0 17 3 2 #" l"
0 0 17 3 1 #"o"
0 0 17 3 2 #"ok"
0 0 17 3 1 #"s"
0 0 17 3 2 #" a"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 2 #"th"
0 0 17 3 2 #"e "
0 0 17 3 4 #"curr"
0 0 17 3 2 #"en"
0 0 17 3 2 #"t "
0 0 17 3 2 #"st"
0 0 17 3 1 #"a"
0 0 17 3 7 #"te and "
0 0 17 3 2 #"th"
0 0 17 3 2 #"e "
0 0 17 3 1 #"n"
0 0 17 3 2 #"ex"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 2 #"le"
0 0 17 3 1 #"g"
0 0 17 3 1 #"a"
0 0 17 3 2 #"l "
0 0 17 3 2 #"mo"
0 0 17 3 1 #"v"
0 0 17 3 3 #"es "
0 0 17 3 1 #"t"
0 0 17 3 1 #"h"
0 0 17 3 1 #"a"
0 0 17 3 14 #"t can be made."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"min-max-"
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 14 3 5 #"DEPTH"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 12 #"evaluation-f"
0 0 14 3 7 #"unction"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 6 #"min-ma"
0 0 14 3 14 #"x-list-of-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"leg"
0 0 14 3 13 #"al-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 5 #";; Nu"
0 0 17 3 2 #"mb"
0 0 17 3 30 #"er ListOfMove State --> Number"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; F"
0 0 17 3 3 #"unc"
0 0 17 3 1 #"t"
0 0 17 3 2 #"io"
0 0 17 3 1 #"n"
0 0 17 3 2 #"s "
0 0 17 3 6 #"examin"
0 0 17 3 4 #"es l"
0 0 17 3 2 #"is"
0 0 17 3 2 #"t "
0 0 17 3 1 #"o"
0 0 17 3 2 #"f "
0 0 17 3 2 #"le"
0 0 17 3 2 #"ga"
0 0 17 3 2 #"l "
0 0 17 3 1 #"m"
0 0 17 3 2 #"ov"
0 0 17 3 3 #"es "
0 0 17 3 1 #"a"
0 0 17 3 1 #"n"
0 0 17 3 5 #"d pas"
0 0 17 3 2 #"se"
0 0 17 3 2 #"s "
0 0 17 3 1 #"s"
0 0 17 3 2 #"in"
0 0 17 3 2 #"gl"
0 0 17 3 2 #"e "
0 0 17 3 2 #"mo"
0 0 17 3 1 #"v"
0 0 17 3 3 #"es "
0 0 17 3 2 #"in"
0 0 17 3 3 #"to "
0 0 17 3 2 #"th"
0 0 17 3 3 #"e a"
0 0 17 3 2 #"bo"
0 0 17 3 11 #"ve function"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 2 #"fo"
0 0 17 3 2 #"r "
0 0 17 3 2 #"ev"
0 0 17 3 3 #"alu"
0 0 17 3 2 #"at"
0 0 17 3 2 #"io"
0 0 17 3 2 #"n "
0 0 17 3 2 #"or"
0 0 17 3 1 #" "
0 0 17 3 3 #"fur"
0 0 17 3 2 #"th"
0 0 17 3 1 #"e"
0 0 17 3 2 #"r "
0 0 17 3 8 #"processi"
0 0 17 3 5 #"ng. V"
0 0 17 3 2 #"al"
0 0 17 3 2 #"ue"
0 0 17 3 2 #"s "
0 0 17 3 2 #"ar"
0 0 17 3 2 #"e "
0 0 17 3 3 #"lat"
0 0 17 3 2 #"er"
0 0 17 3 2 #" o"
0 0 17 3 2 #"n "
0 0 17 3 3 #"pas"
0 0 17 3 2 #"se"
0 0 17 3 2 #"d "
0 0 17 3 3 #"to "
0 0 17 3 1 #"t"
0 0 17 3 4 #"he d"
0 0 17 3 2 #"et"
0 0 17 3 2 #"er"
0 0 17 3 2 #"mi"
0 0 17 3 2 #"na"
0 0 17 3 1 #"t"
0 0 17 3 11 #"e function."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"min-max-list-of-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 14 3 4 #"oves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"No le"
0 0 19 3 1 #"g"
0 0 19 3 7 #"al move"
0 0 19 3 2 #"s\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"mo"
0 0 14 3 3 #"ves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"mi"
0 0 14 3 3 #"n-m"
0 0 14 3 8 #"ax-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"mov"
0 0 14 3 2 #"es"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"determinate"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #" "
0 0 23 3 14 #"              "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 2 #"mi"
0 0 14 3 3 #"n-m"
0 0 14 3 8 #"ax-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 6 #"min-ma"
0 0 14 3 1 #"x"
0 0 14 3 5 #"-list"
0 0 14 3 8 #"-of-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 2 #"Fu"
0 0 17 3 1 #"n"
0 0 17 3 2 #"ct"
0 0 17 3 2 #"io"
0 0 17 3 2 #"n "
0 0 17 3 4 #"retu"
0 0 17 3 2 #"rn"
0 0 17 3 1 #"s"
0 0 17 3 2 #" e"
0 0 17 3 1 #"i"
0 0 17 3 1 #"t"
0 0 17 3 2 #"he"
0 0 17 3 2 #"r "
0 0 17 3 2 #"ma"
0 0 17 3 2 #"xi"
0 0 17 3 2 #"mu"
0 0 17 3 1 #"m"
0 0 17 3 1 #" "
0 0 17 3 2 #"or"
0 0 17 3 2 #" m"
0 0 17 3 5 #"inimu"
0 0 17 3 2 #"m "
0 0 17 3 1 #"o"
0 0 17 3 1 #"f"
0 0 17 3 2 #" v"
0 0 17 3 2 #"al"
0 0 17 3 3 #"ue1"
0 0 17 3 11 #" and value2"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 2 #"ba"
0 0 17 3 2 #"se"
0 0 17 3 1 #"d"
0 0 17 3 2 #" o"
0 0 17 3 2 #"n "
0 0 17 3 1 #"t"
0 0 17 3 2 #"he"
0 0 17 3 2 #" c"
0 0 17 3 1 #"u"
0 0 17 3 1 #"r"
0 0 17 3 2 #"re"
0 0 17 3 2 #"nt"
0 0 17 3 1 #" "
0 0 17 3 1 #"t"
0 0 17 3 2 #"ur"
0 0 17 3 2 #"n "
0 0 17 3 3 #"in "
0 0 17 3 1 #"t"
0 0 17 3 1 #"h"
0 0 17 3 2 #"e "
0 0 17 3 1 #"g"
0 0 17 3 1 #"a"
0 0 17 3 2 #"me"
0 0 17 3 1 #" "
0 0 17 3 3 #"- d"
0 0 17 3 2 #"ec"
0 0 17 3 1 #"i"
0 0 17 3 2 #"de"
0 0 17 3 2 #"d "
0 0 17 3 1 #"b"
0 0 17 3 2 #"y "
0 0 17 3 2 #"st"
0 0 17 3 2 #"at"
0 0 17 3 2 #"e "
0 0 17 3 1 #"s"
0 0 17 3 2 #"tr"
0 0 17 3 1 #"u"
0 0 17 3 1 #"c"
0 0 17 3 2 #"tu"
0 0 17 3 3 #"re "
0 0 17 3 2 #"co"
0 0 17 3 2 #"mp"
0 0 17 3 14 #"arison to RED."
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 4 #"help"
0 0 17 3 3 #"er "
0 0 17 3 2 #"fu"
0 0 17 3 2 #"nc"
0 0 17 3 9 #"tion for "
0 0 17 3 14 #"min-max-list-o"
0 0 17 3 6 #"f-move"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"det"
0 0 14 3 2 #"er"
0 0 14 3 6 #"minate"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"determinate"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 14 3 2 #"al"
0 0 14 3 3 #"ue1"
0 0 23 3 1 #" "
0 0 14 3 6 #"value2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 7 #"rld-sta"
0 0 14 3 11 #"te-whose-tu"
0 0 14 3 2 #"rn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 14 3 5 #"alue1"
0 0 23 3 1 #" "
0 0 14 3 6 #"value2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 3 #"min"
0 0 23 3 1 #" "
0 0 14 3 6 #"value1"
0 0 23 3 1 #" "
0 0 14 3 6 #"value2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 7          19 58           0 0           0 2 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"evaluati"
0 0 14 3 11 #"on-function"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"wa"
0 0 14 3 2 #"lk"
0 0 14 3 6 #"-board"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; World-State move --> Number"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";;Evaluates an entire board by stepping across it"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; A good starting position is (list 0 0)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 104
(
 #";; Check-expects fail on very small boards (also only works with the"
 #" stub form of eval-one-four :::::::;"
) 0 0 17 3 8 #";;;;;;;;"
0 0 17 3 1 #";"
0 0 17 3 3 #";;;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"full-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-world-sta"
0 0 14 3 2 #"te"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 13 #"             "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 14 3 4 #"mpty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"walk-"
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 14 3 7 #"ull-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 5 #"10000"
0 0 23 3 14 #"              "
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 18 #"                  "
0 0 17 3 113
(
 #";; Number by the top of board in each column * number of fours possi"
 #"ble (won't be accurate on boards with <4 rows"
) 0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 5 #"     "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 9 #"         "
0 0 17 3 70
(
 #";; Number by bottom of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 23 3 1 #" "
0 0 23 3 4 #"    "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 70
(
 #";; Number in center of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 56 #"                                                        "
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 8 #"        "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 13 #"             "
0 0 17 3 29 #";; Number of columns on board"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; Evaluates t"
0 0 17 3 14 #"o 60 on a 7x6 "
0 0 17 3 5 #"board"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wa"
0 0 14 3 1 #"l"
0 0 14 3 5 #"k-boa"
0 0 14 3 2 #"rd"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 22 #";; When too close to t"
0 0 17 3 14 #"he right, retu"
0 0 17 3 5 #"rns 0"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wa"
0 0 14 3 1 #"l"
0 0 14 3 5 #"k-boa"
0 0 14 3 2 #"rd"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 18 #"                  "
0 0 17 3 113
(
 #";; Number by the top of board in each column * number of fours possi"
 #"ble (won't be accurate on boards with <4 rows"
) 0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 9 #"         "
0 0 17 3 70
(
 #";; Number by bottom of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 70
(
 #";; Number in center of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 19 #"                   "
0 0 17 3 22 #";; Evaluates to 15 on "
0 0 17 3 19 #"a board with 6 rows"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 3 #"loc"
0 0 15 3 2 #"al"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 5 #"efine"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 14 3 7 #"ertical"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 4 #"    "
0 0 17 3 7 #";;    X"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 6 #"      "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 5 #";;  X"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 6 #"      "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 5 #";;  X"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 6 #"      "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 3 #";;X"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 4 #"defi"
0 0 15 3 2 #"ne"
0 0 23 3 1 #" "
0 0 14 3 3 #"up-"
0 0 14 3 1 #"d"
0 0 14 3 7 #"iagonal"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 8 #"        "
0 0 17 3 15 #";;            X"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 8 #";;     X"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 5 #";;  X"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 3 #";;X"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"down-"
0 0 14 3 1 #"d"
0 0 14 3 7 #"iagonal"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 3 #"   "
0 0 17 3 15 #";             X"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 7 #";;    X"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 8 #";;     X"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 9 #";;      X"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 24 #"                        "
0 0 17 3 10 #";; X X X X"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 3 #"efi"
0 0 15 3 2 #"ne"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 11 #"           "
0 0 17 3 26 #";; When it reaches the top"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 16 #"                "
0 0 17 3 43 #";; Then the next move is in the next column"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 6 #"      "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 35 #";; Else it increments the rows by 1"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"eval-them"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 8 #"vertical"
0 0 23 3 1 #" "
0 0 14 3 11 #"up-diagonal"
0 0 23 3 1 #" "
0 0 14 3 3 #"dow"
0 0 14 3 4 #"n-di"
0 0 14 3 1 #"a"
0 0 14 3 3 #"gon"
0 0 14 3 2 #"al"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 40 #";; If too close to the right edge,x stop"
0 0 23 29 1 #"\n"
0 0 23 3 61
#"                                                             "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 82
(
 #"                                                                    "
 #"              "
) 0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 40 #";; If too close to the right edge,x stop"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 42 #";; If its 3 or less spaces from the bottom"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 8 #"vertical"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 11 #"up-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 34 #";; If within 3 spaces from the top"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 13 #"down-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 17 3 64
#";;In the center of the board   - won't get called on a 7x6 board"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 13 #"down-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 11 #"up-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 8 #"vertical"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; (ListOf (ListOf Moves)) --> (ListOf (ListOf Moves)"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; Removes lists that include moves th"
0 0 17 3 14 #"at are off the"
0 0 17 3 6 #" board"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"chec"
0 0 14 3 1 #"k"
0 0 14 3 5 #"-expe"
0 0 14 3 2 #"ct"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"chec"
0 0 14 3 1 #"k"
0 0 14 3 5 #"-expe"
0 0 14 3 2 #"ct"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"li"
0 0 14 3 2 #"st"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"legal?--moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #" "
0 0 23 3 13 #"             "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"legal?--move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #" "
0 0 23 3 14 #"              "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 13 #"legal?--moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"legal?--move"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"negative?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 10 #"          "
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 9 #"negative?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 3 #"   "
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 3 #"   "
0 0 23 3 1 #" "
0 0 23 3 7 #"       "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 13 #"legal?--moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; World-State (ListOf (ListO"
0 0 17 3 20 #"f Moves)) --> Number"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"e"
0 0 14 3 8 #"val-them"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"fou"
0 0 14 3 2 #"rs"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"eva"
0 0 14 3 8 #"l-one-fo"
0 0 14 3 2 #"ur"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 14 3 4 #"ours"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"eval-them"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; Board (list move move move move) --> Number"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; Takes 4 moves and determines a point value for it"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";(define (eval-one-four moves) 1) ;; stub"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";;Doesn't work yet:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";(define (eval-one-four bd mo"
0 0 17 3 19 #"ves) (error moves))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 3 #"def"
0 0 15 3 3 #"ine"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 15 3 3 #"def"
0 0 15 3 3 #"ine"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 2 #"de"
0 0 15 3 4 #"fine"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"third"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 2 #"de"
0 0 15 3 4 #"fine"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"piec"
0 0 14 3 4 #"e-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"nu"
0 0 14 3 6 #"m-mult"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"bl"
0 0 14 3 10 #"ack-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"false?"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 14 3 1 #"-"
0 0 14 3 4 #"mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 14 3 1 #"-"
0 0 14 3 4 #"mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 3 #"   "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #" "
0 0 14 3 8 #"num-mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"li"
0 0 14 3 1 #"s"
0 0 14 3 2 #"t-"
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 14 3 10 #"s-for-eval"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 14 3 4 #"LACK"
0 0 23 3 1 #" "
0 0 14 3 8 #"num-mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"li"
0 0 14 3 1 #"s"
0 0 14 3 2 #"t-"
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 14 3 10 #"s-for-eval"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 7 #"       "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 14 3 2 #"al"
0 0 14 3 2 #"s-"
0 0 14 3 8 #"for-eval"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 10 #"1000000000"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";;                            ^ If 1 out of 4"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";;                              ^ If 2 out of 4"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";;                                ^ If 3 out of 4"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";;                                      ^ If 4 in a row"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; (ListOf BLACK|RED|BLANK) --> BLACK|RED|BLANK|false"
0 0 23 29 1 #"\n"
0 0 17 3 65
#";; Takes a list of pieces and returns whether there is both black"
0 0 17 3 14 #" and red in th"
0 0 17 3 6 #"e list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 6 #"check-"
0 0 14 3 6 #"expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"blac"
0 0 14 3 8 #"k-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 6 #"check-"
0 0 14 3 6 #"expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"blac"
0 0 14 3 8 #"k-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 6 #"check-"
0 0 14 3 6 #"expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"blac"
0 0 14 3 8 #"k-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 6 #"check-"
0 0 14 3 6 #"expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"blac"
0 0 14 3 8 #"k-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 2 #"  "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 6 #"check-"
0 0 14 3 6 #"expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"blac"
0 0 14 3 8 #"k-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 2 #"  "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"black-"
0 0 14 3 6 #"or-red"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 4 #"defi"
0 0 15 3 2 #"ne"
0 0 23 3 1 #" "
0 0 14 3 11 #"rest-black-"
0 0 14 3 6 #"or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"false?"
0 0 23 3 1 #" "
0 0 14 3 17 #"rest-black-or-red"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 14 3 17 #"rest-black-or-red"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 17 #"rest-black-or-red"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 15 #"               "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; Board Move --> BLACK|RED|BLANK"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; Returns the piece"
0 0 17 3 14 #" at a board po"
0 0 17 3 6 #"sition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"p"
0 0 14 3 7 #"iece-in"
0 0 23 3 1 #" "
0 0 14 3 3 #"sta"
0 0 14 3 2 #"rt"
0 0 14 3 6 #"-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"world-s"
0 0 14 3 1 #"t"
0 0 14 3 12 #"ate-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"re"
0 0 14 3 2 #"d?"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 1 #"e"
0 0 15 3 4 #"fine"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"black?"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; takes a column of checkers, and returns the value of that column"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";; big numbers are good for the human, small numbers are good for AI"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; finds how valuable this column is, and finds who has more checker"
 #"s "
) 0 0 23 29 1 #"\n"
0 0 17 3 11 #";; there.  "
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 23 29 1 #"\n"
0 0 17 3 7 #";; alop"
0 0 17 3 20 #" Natural --> Natural"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"checker-column"
0 0 23 3 1 #" "
0 0 14 3 4 #"alop"
0 0 23 3 1 #" "
0 0 14 3 11 #"current-col"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 65
#";; checkers played towards the center are worth more points than "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 34 #";; those played toward the edge.  "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 67
#";; yes, 3 is a constant, but is connect *four*.  playing with fewer"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 39 #";; than 4 columns would be a bit stilly"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 5 #"efine"
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 3 #"min"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 14 3 4 #"-col"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 11 #"current-col"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 5 #"efine"
0 0 23 3 1 #" "
0 0 14 3 2 #"nu"
0 0 14 3 5 #"m-red"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 4 #"red?"
0 0 23 3 1 #" "
0 0 14 3 4 #"alop"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 3 #"def"
0 0 15 3 3 #"ine"
0 0 23 3 1 #" "
0 0 14 3 4 #"num-"
0 0 14 3 5 #"black"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 6 #"black?"
0 0 23 3 1 #" "
0 0 14 3 4 #"alop"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 17 3 66
#";; want to spread checkers out as stacking them vertically is not "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 17 3 55 #";; a great idea.  therefore, putting a checker in a new"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 17 3 41 #";; column counts as 2 checkers for evalua"
0 0 17 3 1 #"t"
0 0 17 3 2 #"io"
0 0 17 3 1 #"n"
0 0 17 3 9 #" purposes"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 7 #"num-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"min"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 14 3 1 #"u"
0 0 14 3 5 #"m-red"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 9 #"num-black"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"min"
0 0 23 3 1 #" "
0 0 14 3 9 #"num-black"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";; recursively walks through the columns on the board, and "
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; sums up the point "
0 0 17 3 20 #"value of each column"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"checker-value"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"curre"
0 0 14 3 1 #"n"
0 0 14 3 5 #"t-col"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 23 3 1 #"["
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 2 #"cu"
0 0 14 3 9 #"rrent-col"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 14 3 13 #"hecker-column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 11 #"current-col"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 6 #"checke"
0 0 14 3 1 #"r"
0 0 14 3 2 #"-v"
0 0 14 3 4 #"alue"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 11 #"current-col"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; state --> Number.  "
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";; evaluates how good a state is.  larger values are better for red "
 #"(human) "
) 0 0 23 29 1 #"\n"
0 0 17 3 55 #";; while smaller values are better for black (computer)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"red_turn?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 75
(
 #";; add a small amount of random noise to have more interesting tie b"
 #"reaking"
) 0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 79
(
 #";; otherwise the computer will tend to pick moves on the left side o"
 #"f the board"
) 0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 20 3 5 #"10000"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 76
(
 #";; we need to look backwards, since if it's red's turn and the game "
 #"was just"
) 0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 57 #";; won, that means that black won on its move (thus -999)"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 9 #"red_turn?"
0 0 23 3 1 #" "
0 0 20 3 4 #"-999"
0 0 23 3 1 #" "
0 0 20 3 3 #"999"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 13 #"checker-value"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; you should not modify code below this point"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 95
(
 #";; the representation of the world.  you should not be modifying thi"
 #"s structure or its contents"
) 0 0 23 29 1 #"\n"
0 0 17 3 91
(
 #";; to conduct the search, you can create instances of this structure"
 #" as your representation"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #";; *** the settings part of world-state is now defined as time (a Nu"
 #"mber > 0)"
) 0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #";; *** as well as other-info, which is user-defined and can include "
 #"anything you like"
) 0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";; *** you can define a structure and add it to the state representa"
 #"tion, or"
) 0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; *** just store a number.  the provided code will not make use of "
 #"it"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #";(define-struct "
0 0 17 3 11 #"world-state"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 8 #"position"
0 0 17 3 1 #" "
0 0 17 3 10 #"whose-turn"
0 0 17 3 22 #" settings other-info))"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";;                                                         ^^^^"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #";; returns the checker color (RED, BLACK, or BLANK) of the specified"
 #" position"
) 0 0 23 29 1 #"\n"
0 0 17 3 15 #";; on the board"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-at"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #" "
0 0 14 3 2 #"co"
0 0 14 3 4 #"lumn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 14 3 6 #"et-nth"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; Natural List --> Element"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; returns the n"
0 0 17 3 20 #"th element of a list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"nth-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #")"
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"nth-he"
0 0 14 3 4 #"lper"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 14 3 1 #"t"
0 0 14 3 8 #"h-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 5 #"COLUM"
0 0 14 3 2 #"NS"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"RED-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 14 3 12 #"LACK-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 14 3 12 #"LANK-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 3 #".66"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 2 #"de"
0 0 15 3 1 #"f"
0 0 15 3 3 #"ine"
0 0 23 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 3 #"COL"
0 0 14 3 1 #"U"
0 0 14 3 3 #"MNS"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 2 #"ef"
0 0 15 3 3 #"ine"
0 0 23 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"R"
0 0 14 3 3 #"OWS"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"rectangle"
0 0 23 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 23 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"place-checker"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 14 3 3 #"ove"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"map-coordinates"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 14 3 9 #"ext-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 15 3 1 #"c"
0 0 15 3 3 #"ond"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #" "
0 0 19 3 11 #"\"button-dow"
0 0 19 3 2 #"n\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 5 #"     "
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 20 #"rld-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 19 3 10 #"\"RED WINS\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 20 #"rld-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 19 3 12 #"\"BLACK WINS\""
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 1 #"l"
0 0 15 3 4 #"ocal"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"computer-moves"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 1 #" "
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 20 #"rld-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 10 #"\"RED WINS\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 20 #"rld-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 12 #"\"BLACK WINS\""
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 21 #"                     "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"display-column2"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 11 #"place-image"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 15 3 2 #"co"
0 0 15 3 2 #"nd"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"RED-CH"
0 0 14 3 1 #"E"
0 0 14 3 2 #"CK"
0 0 14 3 2 #"ER"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"BLACK-CH"
0 0 14 3 1 #"E"
0 0 14 3 2 #"CK"
0 0 14 3 2 #"ER"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLANK-CHECKER"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"r"
0 0 14 3 3 #"est"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 14 3 2 #"-o"
0 0 14 3 5 #"ffset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"display-board-helper"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 5 #"     "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 11 #"display-boa"
0 0 14 3 1 #"r"
0 0 14 3 8 #"d-helper"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 14 3 7 #"osition"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 3 #"PIE"
0 0 14 3 7 #"CE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 8 #"x-offset"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 21 #"                     "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"display-bo"
0 0 14 3 3 #"ard"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"display-b"
0 0 14 3 11 #"oard-helper"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #" "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"render"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 13 #"display-board"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"map-coordinate"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 14 3 2 #"up"
0 0 14 3 3 #"per"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 14 3 2 #"os"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 5 #"     "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #" "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 14 3 1 #"-"
0 0 14 3 2 #"co"
0 0 14 3 8 #"ordinate"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 1 #"P"
0 0 14 3 1 #"I"
0 0 14 3 2 #"EC"
0 0 14 3 6 #"E-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 1 #"P"
0 0 14 3 9 #"IECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"map-coor"
0 0 14 3 1 #"d"
0 0 14 3 6 #"inates"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"map-coor"
0 0 14 3 3 #"din"
0 0 14 3 3 #"ate"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #" "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 8 #"map-coor"
0 0 14 3 3 #"din"
0 0 14 3 3 #"ate"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 8 #"on-mouse"
0 0 23 3 1 #" "
0 0 14 3 13 #"place-checker"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 7 #"to-draw"
0 0 23 3 1 #" "
0 0 14 3 6 #"render"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; *** this function permits you to make both legal and illegal move"
 #"s"
) 0 0 23 29 1 #"\n"
0 0 17 3 97
(
 #";; *** you do not need to use this function and probably should not."
 #"  someone thought of a reason"
) 0 0 23 29 1 #"\n"
0 0 17 3 93
(
 #";; *** for it to exist and so i included it.  to be clear, your prog"
 #"ram is only permitted to "
) 0 0 23 29 1 #"\n"
0 0 17 3 4 #";; *"
0 0 17 3 20 #"** make legal moves."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"make-hypothetical-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"update-column"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 12 #"            "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 4 #"turn"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #" "
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"upda"
0 0 14 3 9 #"te-column"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 14 3 3 #"urn"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"do-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-x"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-y"
0 0 23 3 1 #" "
0 0 14 3 9 #"current-x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 12 #"            "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 6 #"move-x"
0 0 23 3 1 #" "
0 0 14 3 9 #"current-x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"updat"
0 0 14 3 8 #"e-column"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-y"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #" "
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 7 #"do-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 14 3 3 #"urn"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-x"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 9 #"current-x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"m"
0 0 14 3 1 #"a"
0 0 14 3 8 #"ke-world"
0 0 14 3 6 #"-state"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 7 #"do-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 14 3 4 #"tate"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 7 #"rld-sta"
0 0 14 3 13 #"te-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 7 #"rld-sta"
0 0 14 3 13 #"te-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 12 #"world-state-"
0 0 14 3 8 #"settings"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 2 #"wo"
0 0 14 3 20 #"rld-state-other-info"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 94
(
 #";; you will use this function.  it takes as input the move you will "
 #"make, represented as a lis"
) 0 0 17 3 20 #"t of X Y coordinates"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"mak"
0 0 14 3 4 #"e-mo"
0 0 14 3 2 #"ve"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"legal-next"
0 0 14 3 6 #"-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 2 #"ma"
0 0 14 3 6 #"ke-hyp"
0 0 14 3 14 #"othetical-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; world-state --> list"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; returns all of the legal moves for "
0 0 17 3 20 #"the current position"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"first-blank"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 8 #"        "
0 0 23 3 1 #" "
0 0 23 3 3 #"   "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 11 #"           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 2 #"BL"
0 0 14 3 3 #"ANK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 2 #"  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 14 3 1 #"-"
0 0 14 3 2 #"bl"
0 0 14 3 3 #"ank"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-moves"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"blank"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"first-blank"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 5 #"blank"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 10 #"          "
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 1 #" "
0 0 23 3 5 #"     "
0 0 23 3 7 #"       "
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"first-blank"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 1 #" "
0 0 23 3 10 #"          "
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; check-win:  world-state --> boolean"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; determines whether the game has ended with a victory fo"
0 0 17 3 20 #"r whoever just moved"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"up-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 1 #"l"
0 0 15 3 4 #"ocal"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 2 #"de"
0 0 15 3 4 #"fine"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"right-row"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 1 #" "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 1 #"f"
0 0 14 3 1 #"a"
0 0 14 3 3 #"lse"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 2 #"  "
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 14 3 2 #"et"
0 0 14 3 4 #"-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 14 3 2 #"et"
0 0 14 3 4 #"-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 14 3 2 #"et"
0 0 14 3 4 #"-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"up-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 1 #"f"
0 0 14 3 1 #"a"
0 0 14 3 3 #"lse"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"get-"
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"get-"
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"get-"
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"down-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 2 #"  "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 1 #"f"
0 0 14 3 1 #"a"
0 0 14 3 3 #"lse"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"get-"
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"get-"
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #" "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 3 #"   "
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"get-"
0 0 14 3 3 #"nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"victory?"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #" "
0 0 23 3 8 #"        "
0 0 23 3 2 #"  "
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 23 3 1 #"["
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 1 #"u"
0 0 14 3 8 #"p-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 1 #"r"
0 0 14 3 8 #"ight-row"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 8 #"up-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 2 #"do"
0 0 14 3 8 #"wn-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"walk-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 6 #"      "
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 8 #"victory?"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 1 #"w"
0 0 14 3 1 #"a"
0 0 14 3 2 #"lk"
0 0 14 3 7 #"-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"walk-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 6 #"      "
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"world-s"
0 0 14 3 3 #"tat"
0 0 14 3 10 #"e-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"START-BOARD"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"make-wor"
0 0 14 3 4 #"ld-s"
0 0 14 3 4 #"tate"
0 0 23 3 1 #" "
0 0 14 3 11 #"START-BOARD"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";; UGH.  Ignore this test board.  It was created to help me debug."
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; the only valid values in a real board are 0 (BLANK), 1 (RED), and"
 #" "
) 0 0 23 29 1 #"\n"
0 0 17 3 12 #";; 2 (BLACK)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 14 3 1 #"e"
0 0 14 3 5 #"st-bo"
0 0 14 3 3 #"ard"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 2 #"16"
0 0 23 3 1 #" "
0 0 20 3 2 #"17"
0 0 23 3 1 #" "
0 0 20 3 2 #"18"
0 0 23 3 1 #" "
0 0 20 3 2 #"19"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 2 #"22"
0 0 23 3 1 #" "
0 0 20 3 2 #"23"
0 0 23 3 1 #" "
0 0 20 3 2 #"24"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"26"
0 0 23 3 1 #" "
0 0 20 3 2 #"27"
0 0 23 3 1 #" "
0 0 20 3 2 #"28"
0 0 23 3 1 #" "
0 0 20 3 2 #"29"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 2 #"32"
0 0 23 3 1 #" "
0 0 20 3 2 #"33"
0 0 23 3 1 #" "
0 0 20 3 2 #"34"
0 0 23 3 1 #" "
0 0 20 3 2 #"35"
0 0 23 3 1 #" "
0 0 20 3 2 #"36"
0 0 23 3 1 #" "
0 0 20 3 2 #"37"
0 0 23 3 1 #" "
0 0 20 3 2 #"38"
0 0 23 3 1 #" "
0 0 20 3 2 #"39"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"test-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"make-wo"
0 0 14 3 4 #"rld-"
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 2 #"te"
0 0 14 3 4 #"st-b"
0 0 14 3 4 #"oard"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #")"
0           0
