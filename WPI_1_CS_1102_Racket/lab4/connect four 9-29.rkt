#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 70 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 7076 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 270
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname |conn"
 #"ect four 9-29|) (read-case-sensitive #t) (teachpacks ((lib \"univers"
 #"e.rkt\" \"teachpack\" \"2htdp\"))) (htdp-settings #(#t constructor r"
 #"epeating-decimal #f #t none #f ((lib \"universe.rkt\" \"teachpack\" "
 #"\"2htdp\")))))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 11 #"world-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"position"
0 0 23 3 1 #" "
0 0 14 3 10 #"whose-turn"
0 0 23 3 1 #" "
0 0 14 3 8 #"settings"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 80
(
 #";; do not modify the constants, except for experimentation with ROWS"
 #" and COLUMNS"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 11 #";; can vary"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 11 #";; can vary"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";;Ivan Melnikov & Ezra Davis"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; Our constants:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"MAX_DEPTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"WIN_VAL"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";;Data Definitions:"
0 0 23 29 1 #"\n"
0 0 17 3 7 #";; Move"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; Move is (list Integer Integer)"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; interp. first item is x, second is y value of a move"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"fn-for-move"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 3 #"..."
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 3 5 #"     "
0 0 17 3 7 #";Number"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 3 #"   "
0 0 17 3 7 #";Number"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; Template rules used:"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";;  - compound: 2 fields"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; minmax"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";; minmax is (make-minmax (list Integer Integer) Number)"
0 0 23 29 1 #"\n"
0 0 17 3 111
(
 #";; interp. move is the location of a move, and val is the number ass"
 #"igned to that move by the minimax algorithm"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 6 #"minmax"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"fn-for-minmax"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 3 #"..."
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"fn-for-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"minmax-move"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 10 #"minmax-val"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 135
(
 #";; Note: the only \"time\" functions in ISL are (time fn) - used for"
 #" testing, and (current-seconds) - accuracy only to the nearest secon"
 #"d"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; Boolean Boolean --> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Exclusive or..."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"xor"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 17 3 20 #";;Exhaustive testing"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"xor"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"xor"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"xor"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"xor"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; state --> state !!!"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; you will implement this function to make a move"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"computer-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"complex-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; state --> move"
0 0 23 29 1 #"\n"
0 0 17 3 94
(
 #";; makes a simple move based on our evaluation function - looking th"
 #"e one move into the future"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"simple-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #" "
0 0 17 3 25 #";; (ListOf move) --> move"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"pick-favorite"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 19 3 23 #"\"No legal moves - Draw\""
0 0 23 3 1 #"]"
0 0 23 3 1 #" "
0 0 17 3 16 #";; Ask about !!!"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"rest-fav"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"pick-favorite"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 8 #"rest-fav"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 14 3 8 #"rest-fav"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 13 #"pick-favorite"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; state --> move"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; Uses minimax to calculate a move based on evaluation function. !!"
 #"!"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"complex-move"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 20 3 1 #"2"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"complex-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 11 #"minmax-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 24 #"min-and-max-search--list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 9 #"MAX_DEPTH"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 55 #";;(complex-move-helper state (legal-next-moves state)))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; state bool --> minmax"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; recursively finds the minimum/or maximum !!! fix"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"minmax?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"min-and-max-search"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 9 #"MAX_DEPTH"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"min-and-max-search"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 11 #"make-minmax"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 3 #"-10"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"min-and-max-search"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 11 #"make-minmax"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 24 #"min-and-max-search--list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 14 3 5 #"state"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 14 3 5 #"depth"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; (listof move) state bool Natural --> minmax"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";; see min-and-max-search - this function's mutual recursion buddy"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 24 #"min-and-max-search--list"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Draw\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"min-and-max-search"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 3 2 #") "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"mm-first"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"min-and-max-search"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 54 #"                                                      "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 54 #"                                                      "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"depth"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 14 #"mm-best-so-far"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 24 #"min-and-max-search--list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 66
#"                                                                  "
0 0 14 3 5 #"state"
0 0 23 29 1 #"\n"
0 0 23 3 66
#"                                                                  "
0 0 14 3 5 #"depth"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 13 #";; Red's turn"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"minmax-val"
0 0 23 3 1 #" "
0 0 14 3 8 #"mm-first"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"minmax-val"
0 0 23 3 1 #" "
0 0 14 3 14 #"mm-best-so-far"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 14 #"mm-best-so-far"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 8 #"mm-first"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 15 #";; Black's turn"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"minmax-val"
0 0 23 3 1 #" "
0 0 14 3 8 #"mm-first"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"minmax-val"
0 0 23 3 1 #" "
0 0 14 3 14 #"mm-best-so-far"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 8 #"mm-first"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 14 #"mm-best-so-far"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 26 #";; Equivalent to the cond:"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 70
(
 #";(xor (= (world-state-whose-turn state) 1) ;;;;This may have to chan"
 #"ge"
) 0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 60
#";     (< (minmax-val mm-first) (minmax-val mm-best-so-far)))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 9 #";mm-first"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 16 #";mm-best-so-far)"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";;; !!! needs work"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; state --> Number"
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";; evaluates how good a state is.  larger values are better for red "
 #"(human) "
) 0 0 23 29 1 #"\n"
0 0 17 3 55 #";; while smaller values are better for black (computer)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 20 3 1 #"2"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 5 #"10000"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 6 #"-10000"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 20 3 2 #"10"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 20 3 3 #"-10"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"evaluation-function"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; World-State move --> Number"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";;Evaluates an entire board by stepping across it"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; A good starting position is (list 0 0)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 116
(
 #";; Check-expects fail on very small boards (also only works with the"
 #" stub form of eval-one-four :::::::;;;;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"full-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 8 #"full-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 5 #"10000"
0 0 23 3 14 #"              "
0 0 23 29 1 #"\n"
0 0 23 3 50 #"                                                  "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 18 #"                  "
0 0 17 3 113
(
 #";; Number by the top of board in each column * number of fours possi"
 #"ble (won't be accurate on boards with <4 rows"
) 0 0 23 29 1 #"\n"
0 0 23 3 56 #"                                                        "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 9 #"         "
0 0 17 3 70
(
 #";; Number by bottom of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 56 #"                                                        "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 70
(
 #";; Number in center of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 56 #"                                                        "
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 53 #"                                                     "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 13 #"             "
0 0 17 3 29 #";; Number of columns on board"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; Evaluates to 60 on a 7x6 board"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 41 #";; When too close to the right, returns 0"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 18 #"                  "
0 0 17 3 113
(
 #";; Number by the top of board in each column * number of fours possi"
 #"ble (won't be accurate on boards with <4 rows"
) 0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 9 #"         "
0 0 17 3 70
(
 #";; Number by bottom of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 70
(
 #";; Number in center of board in each column * number of fours possib"
 #"le"
) 0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 19 #"                   "
0 0 17 3 41 #";; Evaluates to 15 on a board with 6 rows"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"vertical"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 4 #"    "
0 0 17 3 7 #";;    X"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 5 #";;  X"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 5 #";;  X"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 3 #";;X"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"up-diagonal"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 8 #"        "
0 0 17 3 15 #";;            X"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                    "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 8 #";;     X"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                    "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 5 #";;  X"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                    "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 17 3 3 #";;X"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"down-diagonal"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 3 #"   "
0 0 17 3 15 #";             X"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 7 #";;    X"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 8 #";;     X"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 9 #";;      X"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 24 #"                        "
0 0 17 3 10 #";; X X X X"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 11 #"           "
0 0 17 3 26 #";; When it reaches the top"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 16 #"                "
0 0 17 3 43 #";; Then the next move is in the next column"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 35 #";; Else it increments the rows by 1"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"eval-them"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 8 #"vertical"
0 0 23 3 1 #" "
0 0 14 3 11 #"up-diagonal"
0 0 23 3 1 #" "
0 0 14 3 13 #"down-diagonal"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 40 #";; If too close to the right edge,x stop"
0 0 23 29 1 #"\n"
0 0 23 3 82
(
 #"                                                                    "
 #"              "
) 0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 82
(
 #"                                                                    "
 #"              "
) 0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 40 #";; If too close to the right edge,x stop"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 42 #";; If its 3 or less spaces from the bottom"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 8 #"vertical"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 11 #"up-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 34 #";; If within 3 spaces from the top"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 13 #"down-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 17 3 64
#";;In the center of the board   - won't get called on a 7x6 board"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 6 #"across"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 13 #"down-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 11 #"up-diagonal"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 8 #"vertical"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; (ListOf (ListOf Moves)) --> (ListOf (ListOf Moves)"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; Removes lists that include moves that are off the board"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"clip"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"legal?--moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"legal?--move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"("
0 0 14 3 13 #"legal?--moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"legal?--move"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"negative?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 9 #"negative?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 13 #"legal?--moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; World-State (ListOf (ListOf Moves)) --> Number"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"eval-them"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"eval-them"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"fours"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; Board (list move move move move) --> Number"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; Takes 4 moves and determines a point value for it"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";(define (eval-one-four moves) 1) ;; stub"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";;Doesn't work yet:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";(define (eval-one-four bd moves) (error moves))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"eval-one-four"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"third"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"moves"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"num-mult"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"false?"
0 0 23 3 1 #" "
0 0 14 3 8 #"num-mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 14 3 8 #"num-mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #" "
0 0 14 3 8 #"num-mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 13 #"vals-for-eval"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 8 #"num-mult"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 13 #"vals-for-eval"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 3 #"two"
0 0 23 3 1 #" "
0 0 14 3 5 #"three"
0 0 23 3 1 #" "
0 0 14 3 5 #"forth"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"vals-for-eval"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 10 #"1000000000"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";;                            ^ If 1 out of 4"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";;                              ^ If 2 out of 4"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";;                                ^ If 3 out of 4"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";;                                      ^ If 4 in a row"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; (ListOf BLACK|RED|BLANK) --> BLACK|RED|BLANK|false"
0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #";; Takes a list of pieces and returns whether there is both black an"
 #"d red in the list"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 2 #"  "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 3 #"   "
0 0 14 3 3 #"RED"
0 0 23 3 2 #"  "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 17 #"rest-black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"black-or-red"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"false?"
0 0 23 3 1 #" "
0 0 14 3 17 #"rest-black-or-red"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #" "
0 0 14 3 17 #"rest-black-or-red"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 17 #"rest-black-or-red"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; Board Move --> BLACK|RED|BLANK"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; Returns the piece at a board position"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"piece-in"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 97
(
 #";; you must implement the above two functions as part of the asignme"
 #"nt, but may create additional"
) 0 0 23 29 1 #"\n"
0 0 17 3 19 #";; helper functions"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 122
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; VI"
 #"SUALIZATION OF BOARD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 17 3 18 #";;!!! remove later"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 15 #";; Bottom right"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 14 #";; bottom left"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 12 #";; top right"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 11 #";; top left"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; (listof move) --> image"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; last argument is first move"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"draw"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 14 #"draw-for-tests"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"draw-helper"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"draw-helper"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 5 #"state"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"draw-helper"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lom"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; move --> image"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"depict"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 14 #"draw-for-tests"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"draw-for-tests"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 12           4 58 11528
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:p"
 #"oint 540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 5120/11 170/11 #(struct:translate 30 30 "
 #"#(struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point"
 #" 540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 5120/11 995/11 #(struct:translate 30 30 #(st"
 #"ruct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struc"
 #"t:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540"
 #" 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 5120/11 1820/11 #(struct:translate 30 30 #(struc"
 #"t:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 46"
 #"5) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 5120/11 2645/11 #(struct:translate 30 30 #(struct:e"
 #"llipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) "
 #"#(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 5120/11 3470/11 #(struct:translate 30 30 #(struct:elli"
 #"pse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(s"
 #"truct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 5120/11 4295/11 #(struct:translate 30 30 #(struct:ellipse"
 #" 60 60 0 255 \"black\"))) #(struct:translate 0 0 #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(stru"
 #"ct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 4295/11 170/11 #(struct:translate 30 30 #(struct:ellipse 60 "
 #"60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:p"
 #"oint 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 4295/11 995/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0"
 #" 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:point"
 #" 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"4295/11 1820/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0 25"
 #"5 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point "
 #"0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:point 0 "
 #"465)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 429"
 #"5/11 2645/11 #(struct:translate 30"
 #" 30 #(struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:p"
 #"oint 540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 4295/11 3470/11 #(struct:translate 30 30"
 #" #(struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:poin"
 #"t 540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 4295/11 4295/11 #(struct:translate 30 30 #("
 #"struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 5"
 #"40 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 3470/11 170/11 #(struct:translate 30 30 #(stru"
 #"ct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 4"
 #"65) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 3470/11 995/11 #(struct:translate 30 30 #(struct:e"
 #"llipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) "
 #"#(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 3470/11 1820/11 #(struct:translate 30 30 #(struct:elli"
 #"pse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(s"
 #"truct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 3470/11 2645/11 #(struct:translate 30 30 #(struct:ellipse"
 #" 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(stru"
 #"ct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 3470/11 3470/11 #(struct:translate 30 30 #(struct:ellipse 60"
 #" 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struc"
 #"t:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:"
 #"point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 3470/11 4295/11 #(struct:translate 30 30 #(struct:ellipse 60 60"
 #" 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:p"
 #"oint 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:poi"
 #"nt 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 2645/11 170/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0 2"
 #"55 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:point 0"
 #" 465)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 26"
 #"45/11 995/11 #(struct:translate 30"
 #" 30 #(struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:p"
 #"oint 540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 2645/11 1820/11 #(struct:translate 30 30"
 #" #(struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:poin"
 #"t 540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 2645/11 2645/11 #(struct:translate 30 30 #("
 #"struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 5"
 #"40 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 2645/11 3470/11 #(struct:translate 30 30 #(str"
 #"uct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 "
 #"465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 2645/11 4295/11 #(struct:translate 30 30 #(struct"
 #":ellipse 60 60 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) "
 #"#(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 1820/11 170/11 #(struct:translate 30 30 #(struct:ellip"
 #"se 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(st"
 #"ruct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 1820/11 995/11 #(struct:translate 30 30 #(struct:ellipse 6"
 #"0 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct"
 #":point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 1820/11 1820/11 #(struct:translate 30 30 #(struct:ellipse 60 6"
 #"0 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:po"
 #"int 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 1820/11 2645/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0"
 #" 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:point"
 #" 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"1820/11 3470/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0 25"
 #"5 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point "
 #"0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:point 0 "
 #"465)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 182"
 #"0/11 4295/11 #(struct:translate 30"
 #" 30 #(struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:p"
 #"oint 540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 995/11 170/11 #(struct:translate 30 30 #"
 #"(struct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(st"
 #"ruct:crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point "
 #"540 465) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 995/11 995/11 #(struct:translate 30 30 #(stru"
 #"ct:ellipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 4"
 #"65) #(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 995/11 1820/11 #(struct:translate 30 30 #(struct:e"
 #"llipse 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) "
 #"#(struct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 995/11 2645/11 #(struct:translate 30 30 #(struct:ellip"
 #"se 60 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(st"
 #"ruct:point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 995/11 3470/11 #(struct:translate 30 30 #(struct:ellipse 6"
 #"0 60 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct"
 #":point 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 995/11 4295/11 #(struct:translate 30 30 #(struct:ellipse 60 60"
 #" 0 255 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:p"
 #"oint 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:poi"
 #"nt 0 465)) #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 170/11 170/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0 25"
 #"5 \"white\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point "
 #"0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:point 0 "
 #"465)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 170"
 #"/11 995/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"w"
 #"hite\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) "
 #"#(struct:point 540 0) #(struct:point 540 465) #(struct:point 0 465))"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 170/11 1"
 #"820/11 #(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"white"
 #"\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 540 0) #(struct:point 540 465) #(struct:point 0 465)) #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 170/11 2645/"
 #"11 #(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"white\"))"
 #") #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 540 0) #(struct:point 540 465) #(struct:point 0 465)) #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 170/11 3470/11 #"
 #"(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"white\"))) #("
 #"struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:poi"
 #"nt 540 0) #(struct:point 540 465) #(struct:point 0 465)) #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 170/11 4295/11 #(str"
 #"uct:translate 30 30 #(struct:ellipse 60 60 0 255 \"white\"))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"oint 0 0) #(struct:point 540 0) #(struct:point 540 465) #(struct:poi"
 #"nt 0 465)) 255 \"yellow\")))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) #(struct"
 #":bb 540 465 465) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"draw-for-tests"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"RED-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLACK-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLANK-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 3 #".66"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"rectangle"
0 0 23 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 23 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"display-board-helper"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 20 #"display-board-helper"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 8 #"x-offset"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 11 #"place-image"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 11 #"RED-CHECKER"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLACK-CHECKER"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLANK-CHECKER"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 20 #"display-board-helper"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 65
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; you should not modify code below this point"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 95
(
 #";; the representation of the world.  you should not be modifying thi"
 #"s structure or its contents"
) 0 0 23 29 1 #"\n"
0 0 17 3 91
(
 #";; to conduct the search, you can create instances of this structure"
 #" as your representation"
) 0 0 23 29 1 #"\n"
0 0 17 3 59
#";(define-struct world-state (position whose-turn settings))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; Natural List --> Element"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; returns the nth element of a list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"nth-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #")"
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 10 #"nth-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"nth-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"alist"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"RED-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLACK-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLANK-CHECKER"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 3 #".66"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"rectangle"
0 0 23 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 23 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"place-checker"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"map-coordinates"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 19 3 10 #"\"RED WINS\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 19 3 12 #"\"BLACK WINS\""
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"computer-moves"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 10 #"\"RED WINS\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 12 #"\"BLACK WINS\""
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"display-column2"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 11 #"place-image"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 11 #"RED-CHECKER"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLACK-CHECKER"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 13 #"BLANK-CHECKER"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 8 #"y-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"display-board-helper"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 20 #"display-board-helper"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 8 #"x-offset"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 14 #"display-column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 8 #"x-offset"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 17 3 33 #";(define (display-board position)"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 17 3 46 #";  (display-board-helper position OFFSET MTS))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"render"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 10 #";;modified"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"string?"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 20 3 2 #"64"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 1 #")"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 20 #"display-board-helper"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"OFFSET"
0 0 23 3 1 #" "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"map-coordinate"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 14 #"map-coordinate"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"click"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"map-coordinates"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"map-coordinate"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 14 #"map-coordinate"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 10 #"PIECE-SIZE"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 8 #"on-mouse"
0 0 23 3 1 #" "
0 0 14 3 13 #"place-checker"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 7 #"to-draw"
0 0 23 3 1 #" "
0 0 14 3 6 #"render"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 114
(
 #";; you will use this function.  it takes as input the move you will "
 #"make, represented as a list of X Y coordinates"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"update-column"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 4 #"turn"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 13 #"update-column"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 7 #"current"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"do-move"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-x"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-y"
0 0 23 3 1 #" "
0 0 14 3 9 #"current-x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 6 #"move-x"
0 0 23 3 1 #" "
0 0 14 3 9 #"current-x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"update-column"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-y"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 7 #"do-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"turn"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-x"
0 0 23 3 1 #" "
0 0 14 3 6 #"move-y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 9 #"current-x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 7 #"do-move"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 22 #"world-state-whose-turn"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLACK"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-settings"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; world-state --> list"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; returns all of the legal moves for the current position"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"legal-next-moves"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"first-blank"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"first-blank"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-moves"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"first-blank"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 11 #"board-state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"non-neg?"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 23 #";;;Added to remove bugs"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"negative?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"negative?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 8 #"non-neg?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-moves"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; check-win:  world-state --> boolean"
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #";; determines whether the game has ended with a victory for whoever "
 #"just moved"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"check-win?"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"up-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"right-row"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"up-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"down-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 23 3 1 #"("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 5 #"color"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"victory?"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 23 3 1 #"["
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"get-nth"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 9 #"up-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 9 #"right-row"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 8 #"up-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 10 #"down-right"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"color"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"walk-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 8 #"victory?"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 11 #"walk-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"walk-column"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"col"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"walk-board"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 20 #"world-state-position"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"START-BOARD"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 7 #"COLUMNS"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 16 #"make-world-state"
0 0 23 3 1 #" "
0 0 14 3 11 #"START-BOARD"
0 0 23 3 1 #" "
0 0 14 3 3 #"RED"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 7         769 60           0 0           0 127 0 23 3 1 #"("
0 0 14 3 4 #"main"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 16 #"make-world-state"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0           0 0 0 23 29 1 #"\n"
0           0
